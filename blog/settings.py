"""
Django settings for blog project.
Generated by 'django-admin startproject' using Django 1.9.
For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# BASE_DIR = "/Users/jmitch/desktop/blog/src/"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'sm@g)(fbwdh5wc*xe@j++m9rh^uza5se9a57c5ptwkg*b@ki0x'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # third party
    'crispy_forms',
    'markdown_deux',
    'pagedown',
    'rest_framework',

    # local apps
    'comments',
    'posts',

]

CRISPY_TEMPLATE_PACK = 'bootstrap3'

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

LOGIN_URL = "/login/"
ROOT_URLCONF = 'blog.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'blog.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME':  os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = '/static/'


STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
    #'/var/www/static/',
]

STATIC_ROOT = os.path.join(os.path.dirname(BASE_DIR), "static_cdn")

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(os.path.dirname(BASE_DIR), "media_cdn")





REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
    ), 
    "DEFAULT_PERMISSION_CLASSES": (
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 2
}
'''
Register a new user+:
    curl -X POST -d "username=user9&password=1234567890" https://test-rest-shelby89.c9users.io/api/users/register/

Login user and get token+:
    curl -X POST -d "username=user9&password=1234567890" https://test-rest-shelby89.c9users.io/api/auth/token/

Get user's profile by his token:
    curl -X GET https://test-rest-shelby89.c9users.io/api/users/profile/ -H 'Authorization: JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InVzZXI5IiwidXNlcl9pZCI6OSwiZW1haWwiOiJzaGVsYnkxMjNAbWFpbC5ydSIsImV4cCI6MTQ2ODIzOTUyN30.C-eblQYrQhs5nWzvCqhpPA1ANNV44KSN5HtgbO8Mhm0'

Create post by token (title, body)+:
    curl -X POST -H "Authorization: JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InVzZXI5IiwidXNlcl9pZCI6OSwiZW1haWwiOiJzaGVsYnkxMjNAbWFpbC5ydSIsImV4cCI6MTQ2ODIyNzA1OH0.hSv73YvvXOM2gwEtfs9-kfq3Ny1TKCKvo6tEqciy0L4" -H "Content-Type: application/json" -d '{"title":"New posts title test2","content":"New content test2","publish":"2016-07-11"}' https://test-rest-shelby89.c9users.io/api/posts/create/
    !!!Field names are not so like in test task.

Get list of posts of user by his token:
    curl -X GET https://test-rest-shelby89.c9users.io/api/posts/users-posts/ -H 'Authorization: JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InVzZXI5IiwidXNlcl9pZCI6OSwiZW1haWwiOiJzaGVsYnkxMjNAbWFpbC5ydSIsImV4cCI6MTQ2ODIzOTUyN30.C-eblQYrQhs5nWzvCqhpPA1ANNV44KSN5HtgbO8Mhm0'

Get list of all post by token, pagination or offset+:
    curl -X GET https://test-rest-shelby89.c9users.io/api/posts/ -H "Authorization: JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InVzZXI5IiwidXNlcl9pZCI6OSwiZW1haWwiOiJzaGVsYnkxMjNAbWFpbC5ydSIsImV4cCI6MTQ2ODIzOTUyN30.C-eblQYrQhs5nWzvCqhpPA1ANNV44KSN5HtgbO8Mhm0"
    !!!Posts can get any user. But need to add permission_classes

Search for posts:
    curl -X GET https://test-rest-shelby89.c9users.io/api/posts/?q=

MiniDoc with urls and requests:


eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwidXNlcl9pZCI6MSwiZW1haWwiOiJzaGVsYnlfZGltYUBtYWlsLnJ1IiwiZXhwIjoxNDY4MTU1NjE1fQ.PLjG8aDXrgKWxVolWO60cIbleEBd178x2ZlZ-HPmt_U


'''